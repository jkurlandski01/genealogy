package net.ipsoft.eliza.dm.semanticnetwork;

import java.io.InputStreamReader;
import java.util.List;

import com.google.common.base.Charsets;
import com.google.common.collect.Lists;
import com.google.common.io.CharStreams;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.utils.URIBuilder;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONTokener;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Required;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;

/**
 * @author holub
 * @since 2014-11-17
 */
@Service
public class ConceptNetQueryService {
    private static final Logger LOG = LoggerFactory.getLogger(ConceptNetQueryService.class);

    @Resource(name="conceptNetHttpClient")
    private HttpClient httpClient;

    private static final String CONCEPTNET_URI = "http://conceptnet5.media.mit.edu/data/5.2/c/en/";
    private static final String EDGES = "edges";
    private static final String MAX_SCORE = "maxScore";
    private static final String NUM_FOUND = "numFound";
    private static final String NBR_TO_RETRIEVE = "100";

    public ConceptNetQuery query(String in) {
        List<Edge> edges = Lists.newArrayList();
        double maxScore = 0.0;
        int numFound = 0;

        try {
            String json = getJsonString(in);
            JSONTokener jsonTokener = new JSONTokener(json);
            JSONObject jsonObject = new JSONObject(jsonTokener);
            maxScore = jsonObject.getDouble(MAX_SCORE);
            numFound = jsonObject.getInt(NUM_FOUND);
            JSONArray resultArray = jsonObject.getJSONArray(EDGES);
            for (int i = 0; i < resultArray.length(); i++) {
                // TODO: go into this object for finer-grained parsing:
                JSONObject result = resultArray.getJSONObject(i);
                Edge edge = new Edge(in, result);
                edges.add(edge);
            }
        } catch (JSONException e) {
            LOG.warn("JSONException: Can't retrieve message for:" + in);
        } catch (Exception e) {
            LOG.warn("IOException: Can't retrieve message for:" + in);
        }

        return new ConceptNetQuery(in, edges, maxScore, numFound);
    }

    public String getJsonString(String input) throws Exception {
        URIBuilder uriBuilder = new URIBuilder(CONCEPTNET_URI + input);
        uriBuilder.addParameter("limit", NBR_TO_RETRIEVE);
        HttpGet get = new HttpGet(uriBuilder.build());
        try {

            HttpResponse httpResponse = httpClient.execute(get);
            int result = httpResponse.getStatusLine().getStatusCode();
            if (HttpStatus.SC_OK == result) {
                return CharStreams.toString(new InputStreamReader(httpResponse.getEntity().getContent(), Charsets.UTF_8));
            } else {
                LOG.warn("Can't receive ConceptNet data for '{}'", input);
                return "";
            }
        } finally {
            get.reset();
        }
    }

}
